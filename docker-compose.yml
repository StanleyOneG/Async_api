version: "3.8"
services:
  postgresql:
    image: postgres:14
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgressql/data
      - ./etl/sqlite_to_postgres/movies_database.sql:/docker-entrypoint-initdb.d/movies_database.sql 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
      interval: 3s
      timeout: 20s
      retries: 5
      start_period: 80s 
    container_name: postgresql
    # ports:
    #   - "5432:5432"

  sqlite_loader:
    build:
      context: ./etl/sqlite_to_postgres
      dockerfile: Dockerfile
    env_file:
      - ./.env
    depends_on:
      postgresql:
        condition: service_healthy
    container_name: sqlite_loader
  
  elasticsearch:
    image: elasticsearch:7.17.9
    environment:
      - discovery.type=single-node
      - node.name=es01
      - bootstrap.memory_lock=true
      - cluster.name=elasticsearch
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
    restart: unless-stopped
    ports:
      - 9200:9200
      - 9300:9300
    env_file:
      - ./.env
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data:rw
    depends_on:
      sqlite_loader:
        condition: service_completed_successfully
    healthcheck:
      test: "curl --user ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD} -XGET 'http://${ELASTIC_HOST}:${ELASTIC_PORT}'"
      interval: 10s
      timeout: 80s
      retries: 5
      start_period: 30s
    container_name: elasticsearch

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data:rw
    ports:
      - 6379:6379
    # expose:
    #   - "6379"
    depends_on:
      postgresql:
        condition: service_healthy
    command: >
      --save 60 1
    container_name: redis

  elastic_loader:
    build:
      context: ./etl/postgres_to_es
      dockerfile: Dockerfile
    env_file:
      - ./.env
    depends_on:
      sqlite_loader:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    container_name: elastic_loader

  elastic_genres_loader:
    build:
      context: ./etl_genres/postgres_to_es
      dockerfile: Dockerfile
    env_file:
      - ./.env
    depends_on:
      sqlite_loader:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    container_name: elastic_genres_loader

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data: